/**
 * Copyright (c) 2022 itemis AG (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.xtext.xtext.generator.hoisting;

import com.google.inject.Guice;
import com.google.inject.Injector;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.XtextStandaloneSetup;
import org.eclipse.xtext.generator.InMemoryFileSystemAccess;
import org.eclipse.xtext.tests.AbstractXtextTests;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xtext.generator.DefaultGeneratorModule;
import org.eclipse.xtext.xtext.generator.model.IXtextGeneratorFileSystemAccess;
import org.eclipse.xtext.xtext.generator.parser.antlr.AntlrDebugContentAssistGrammarGenerator;
import org.eclipse.xtext.xtext.generator.parser.antlr.AntlrDebugProductionGrammarGenerator;
import org.eclipse.xtext.xtext.generator.parser.antlr.AntlrOptions;
import org.junit.Assert;
import org.junit.Test;

/**
 * @author overflow - Initial contribution and API
 */
@SuppressWarnings("all")
public class HoistingGeneratorTest extends AbstractXtextTests {
  public static class InMemFSA extends InMemoryFileSystemAccess implements IXtextGeneratorFileSystemAccess {
    @Override
    public String getPath() {
      return "./";
    }
    
    @Override
    public boolean isOverwrite() {
      return true;
    }
    
    @Override
    public void initialize(final Injector injector) {
      injector.injectMembers(this);
    }
  }
  
  @Override
  public void setUp() throws Exception {
    super.setUp();
    this.with(XtextStandaloneSetup.class);
  }
  
  @Test
  public void testRenderingOfGuardConditionInAlternativesInProductionGrammar() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("grammar com.foo.bar ");
    _builder.newLine();
    _builder.append("import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore");
    _builder.newLine();
    _builder.append("generate myPack \'http://mypack\'");
    _builder.newLine();
    _builder.newLine();
    _builder.append("S: $$ p0 $$?=> \'a\'");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("| $$ p1 $$?=> \'b\';");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("grammar DebugInternalbar;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("options {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@lexer::header {");
    _builder_1.newLine();
    _builder_1.append("package com.foo.parser.antlr.internal;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Hack: Use our own Lexer superclass by means of import. ");
    _builder_1.newLine();
    _builder_1.append("// Currently there is no other way to specify the superclass for the lexer.");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.parser.antlr.Lexer;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@parser::header {");
    _builder_1.newLine();
    _builder_1.append("package com.foo.parser.antlr.internal;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@parser::members {");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append(" \t");
    _builder_1.append("private barGrammarAccess grammarAccess;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public InternalbarParser(TokenStream input, barGrammarAccess grammarAccess) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("this(input);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("this.grammarAccess = grammarAccess;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("registerRules(grammarAccess.getGrammar());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("protected String getFirstRuleName() {");
    _builder_1.newLine();
    _builder_1.append("    \t");
    _builder_1.append("return \"S\";");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("protected barGrammarAccess getGrammarAccess() {");
    _builder_1.newLine();
    _builder_1.append("   \t\t");
    _builder_1.append("return grammarAccess;");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("// no init block");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@rulecatch {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("catch (RecognitionException re) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("recover(input,re);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("appendSkippedTokens();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Entry rule entryRuleS");
    _builder_1.newLine();
    _builder_1.append("entryRuleS returns [EObject current=null]:");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ newCompositeNode(grammarAccess.getSRule()); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("iv_ruleS=ruleS");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ $current=$iv_ruleS.current; }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("EOF;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Rule S");
    _builder_1.newLine();
    _builder_1.append("ruleS returns [EObject current=null]");
    _builder_1.newLine();
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("enterRule();");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("@after {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("leaveRule();");
    _builder_1.newLine();
    _builder_1.append("}:");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("{(p0)}?=>");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("otherlv_1=\'a\'");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t\t");
    _builder_1.append("newLeafNode(otherlv_1, grammarAccess.getSAccess().getAKeyword_0_1());");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append("\t\t    ");
    _builder_1.append("|");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("{(p1)}?=>");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("otherlv_3=\'b\'");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t\t");
    _builder_1.append("newLeafNode(otherlv_3, grammarAccess.getSAccess().getBKeyword_1_1());");
    _builder_1.newLine();
    _builder_1.append("\t\t\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    this.assertTranslatesToProductionGrammar(_builder, _builder_1.toString());
  }
  
  @Test
  public void testRenderingOfGuardConditionInNonTrivialCardinalitityInProductionGrammar() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("grammar com.foo.bar ");
    _builder.newLine();
    _builder.append("import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore");
    _builder.newLine();
    _builder.append("generate myPack \'http://mypack\'");
    _builder.newLine();
    _builder.newLine();
    _builder.append("S: ($$ p0 $$?=> \'a\')*;");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("grammar DebugInternalbar;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("options {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@lexer::header {");
    _builder_1.newLine();
    _builder_1.append("package com.foo.parser.antlr.internal;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Hack: Use our own Lexer superclass by means of import. ");
    _builder_1.newLine();
    _builder_1.append("// Currently there is no other way to specify the superclass for the lexer.");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.parser.antlr.Lexer;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@parser::header {");
    _builder_1.newLine();
    _builder_1.append("package com.foo.parser.antlr.internal;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@parser::members {");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append(" \t");
    _builder_1.append("private barGrammarAccess grammarAccess;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public InternalbarParser(TokenStream input, barGrammarAccess grammarAccess) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("this(input);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("this.grammarAccess = grammarAccess;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("registerRules(grammarAccess.getGrammar());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("protected String getFirstRuleName() {");
    _builder_1.newLine();
    _builder_1.append("    \t");
    _builder_1.append("return \"S\";");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("protected barGrammarAccess getGrammarAccess() {");
    _builder_1.newLine();
    _builder_1.append("   \t\t");
    _builder_1.append("return grammarAccess;");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("// no init block");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@rulecatch {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("catch (RecognitionException re) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("recover(input,re);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("appendSkippedTokens();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Entry rule entryRuleS");
    _builder_1.newLine();
    _builder_1.append("entryRuleS returns [EObject current=null]:");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ newCompositeNode(grammarAccess.getSRule()); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("iv_ruleS=ruleS");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ $current=$iv_ruleS.current; }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("EOF;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Rule S");
    _builder_1.newLine();
    _builder_1.append("ruleS returns [EObject current=null]");
    _builder_1.newLine();
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("enterRule();");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("@after {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("leaveRule();");
    _builder_1.newLine();
    _builder_1.append("}:");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("{(p0)}?=>");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("otherlv_1=\'a\'");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("newLeafNode(otherlv_1, grammarAccess.getSAccess().getAKeyword_1());");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append(")*");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    this.assertTranslatesToProductionGrammar(_builder, _builder_1.toString());
  }
  
  @Test
  public void testRenderingOfSetupBlockInProductionGrammar() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("grammar com.foo.bar ");
    _builder.newLine();
    _builder.append("import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore");
    _builder.newLine();
    _builder.append("generate myPack \'http://mypack\'");
    _builder.newLine();
    _builder.newLine();
    _builder.append("setup $$ s0 $$");
    _builder.newLine();
    _builder.newLine();
    _builder.append("S: \'a\';");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("grammar DebugInternalbar;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("options {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@lexer::header {");
    _builder_1.newLine();
    _builder_1.append("package com.foo.parser.antlr.internal;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Hack: Use our own Lexer superclass by means of import. ");
    _builder_1.newLine();
    _builder_1.append("// Currently there is no other way to specify the superclass for the lexer.");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.parser.antlr.Lexer;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@parser::header {");
    _builder_1.newLine();
    _builder_1.append("package com.foo.parser.antlr.internal;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@parser::members {");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append(" \t");
    _builder_1.append("private barGrammarAccess grammarAccess;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public InternalbarParser(TokenStream input, barGrammarAccess grammarAccess) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("this(input);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("this.grammarAccess = grammarAccess;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("registerRules(grammarAccess.getGrammar());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("protected String getFirstRuleName() {");
    _builder_1.newLine();
    _builder_1.append("    \t");
    _builder_1.append("return \"S\";");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("protected barGrammarAccess getGrammarAccess() {");
    _builder_1.newLine();
    _builder_1.append("   \t\t");
    _builder_1.append("return grammarAccess;");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("// init block");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("s0");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@rulecatch {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("catch (RecognitionException re) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("recover(input,re);");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("appendSkippedTokens();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Entry rule entryRuleS");
    _builder_1.newLine();
    _builder_1.append("entryRuleS returns [String current=null]:");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ newCompositeNode(grammarAccess.getSRule()); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("iv_ruleS=ruleS");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ $current=$iv_ruleS.current.getText(); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("EOF;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Rule S");
    _builder_1.newLine();
    _builder_1.append("ruleS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]");
    _builder_1.newLine();
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("enterRule();");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("@after {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("leaveRule();");
    _builder_1.newLine();
    _builder_1.append("}:");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("kw=\'a\'");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("$current.merge(kw);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("newLeafNode(kw, grammarAccess.getSAccess().getAKeyword());");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    this.assertTranslatesToProductionGrammar(_builder, _builder_1.toString());
  }
  
  @Test
  public void testRenderingOfGuardConditionInAlternativesInContentAssistGrammar() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("grammar com.foo.bar ");
    _builder.newLine();
    _builder.append("import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore");
    _builder.newLine();
    _builder.append("generate myPack \'http://mypack\'");
    _builder.newLine();
    _builder.newLine();
    _builder.append("S: $$ p0 $$?=> \'a\'");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("| $$ p1 $$?=> \'b\';");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("grammar DebugInternalbar;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("options {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@lexer::header {");
    _builder_1.newLine();
    _builder_1.append("package com.foo.parser.antlr.internal;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Hack: Use our own Lexer superclass by means of import. ");
    _builder_1.newLine();
    _builder_1.append("// Currently there is no other way to specify the superclass for the lexer.");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.parser.antlr.Lexer;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@parser::header {");
    _builder_1.newLine();
    _builder_1.append("package com.foo.parser.antlr.internal;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("@parser::members {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private barGrammarAccess grammarAccess;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void setGrammarAccess(barGrammarAccess grammarAccess) {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.grammarAccess = grammarAccess;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("protected Grammar getGrammar() {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return grammarAccess.getGrammar();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("protected String getValueForTokenName(String tokenName) {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return tokenName;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("// no init block");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Entry rule entryRuleS");
    _builder_1.newLine();
    _builder_1.append("entryRuleS");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("{ before(grammarAccess.getSRule()); }");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("ruleS");
    _builder_1.newLine();
    _builder_1.append("{ after(grammarAccess.getSRule()); } ");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("EOF ");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Rule S");
    _builder_1.newLine();
    _builder_1.append("ruleS ");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("{ before(grammarAccess.getSAccess().getAlternatives()); }");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("rule__S__Alternatives");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("{ after(grammarAccess.getSAccess().getAlternatives()); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("rule__S__Alternatives");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{(p0)}?=>(");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("{ before(grammarAccess.getSAccess().getGroup_0()); }");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("rule__S__Group_0__0");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("{ after(grammarAccess.getSAccess().getGroup_0()); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("|");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{(p1)}?=>(");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("{ before(grammarAccess.getSAccess().getGroup_1()); }");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("rule__S__Group_1__0");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("{ after(grammarAccess.getSAccess().getGroup_1()); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("rule__S__Group_0__0");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("rule__S__Group_0__0__Impl");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("rule__S__Group_0__1");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("rule__S__Group_0__0__Impl");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ before(grammarAccess.getSAccess().getGatedSemanticPredicate_0_0()); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ after(grammarAccess.getSAccess().getGatedSemanticPredicate_0_0()); }");
    _builder_1.newLine();
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("rule__S__Group_0__1");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("rule__S__Group_0__1__Impl");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("rule__S__Group_0__1__Impl");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ before(grammarAccess.getSAccess().getAKeyword_0_1()); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("\'a\'");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ after(grammarAccess.getSAccess().getAKeyword_0_1()); }");
    _builder_1.newLine();
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("rule__S__Group_1__0");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("rule__S__Group_1__0__Impl");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("rule__S__Group_1__1");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("rule__S__Group_1__0__Impl");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ before(grammarAccess.getSAccess().getGatedSemanticPredicate_1_0()); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ after(grammarAccess.getSAccess().getGatedSemanticPredicate_1_0()); }");
    _builder_1.newLine();
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("rule__S__Group_1__1");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("rule__S__Group_1__1__Impl");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("rule__S__Group_1__1__Impl");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ before(grammarAccess.getSAccess().getBKeyword_1_1()); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("\'b\'");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ after(grammarAccess.getSAccess().getBKeyword_1_1()); }");
    _builder_1.newLine();
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    this.assertTranslatesToContentAssistGrammar(_builder, _builder_1.toString());
  }
  
  @Test
  public void testRenderingOfGuardConditionInNonTrivialCardinalitityInContentAssistGrammar() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("grammar com.foo.bar ");
    _builder.newLine();
    _builder.append("import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore");
    _builder.newLine();
    _builder.append("generate myPack \'http://mypack\'");
    _builder.newLine();
    _builder.newLine();
    _builder.append("S: ($$ p0 $$?=> \'a\')*;");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("grammar DebugInternalbar;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("options {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@lexer::header {");
    _builder_1.newLine();
    _builder_1.append("package com.foo.parser.antlr.internal;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Hack: Use our own Lexer superclass by means of import. ");
    _builder_1.newLine();
    _builder_1.append("// Currently there is no other way to specify the superclass for the lexer.");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.parser.antlr.Lexer;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@parser::header {");
    _builder_1.newLine();
    _builder_1.append("package com.foo.parser.antlr.internal;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("@parser::members {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private barGrammarAccess grammarAccess;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void setGrammarAccess(barGrammarAccess grammarAccess) {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.grammarAccess = grammarAccess;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("protected Grammar getGrammar() {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return grammarAccess.getGrammar();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("protected String getValueForTokenName(String tokenName) {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return tokenName;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("// no init block");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Entry rule entryRuleS");
    _builder_1.newLine();
    _builder_1.append("entryRuleS");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("{ before(grammarAccess.getSRule()); }");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("ruleS");
    _builder_1.newLine();
    _builder_1.append("{ after(grammarAccess.getSRule()); } ");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("EOF ");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Rule S");
    _builder_1.newLine();
    _builder_1.append("ruleS ");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("{ before(grammarAccess.getSAccess().getGroup()); }");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("{(p0)}?=>");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("rule__S__Group__0");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("*");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("{ after(grammarAccess.getSAccess().getGroup()); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("rule__S__Group__0");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("rule__S__Group__0__Impl");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("rule__S__Group__1");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("rule__S__Group__0__Impl");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ before(grammarAccess.getSAccess().getGatedSemanticPredicate_0()); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ after(grammarAccess.getSAccess().getGatedSemanticPredicate_0()); }");
    _builder_1.newLine();
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("rule__S__Group__1");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("rule__S__Group__1__Impl");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("rule__S__Group__1__Impl");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ before(grammarAccess.getSAccess().getAKeyword_1()); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("\'a\'");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("{ after(grammarAccess.getSAccess().getAKeyword_1()); }");
    _builder_1.newLine();
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    this.assertTranslatesToContentAssistGrammar(_builder, _builder_1.toString());
  }
  
  @Test
  public void testRenderingOfSetupBlockInContentAssistGrammar() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("grammar com.foo.bar ");
    _builder.newLine();
    _builder.append("import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore");
    _builder.newLine();
    _builder.append("generate myPack \'http://mypack\'");
    _builder.newLine();
    _builder.newLine();
    _builder.append("setup $$ s0 $$");
    _builder.newLine();
    _builder.newLine();
    _builder.append("S: \'a\';");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("grammar DebugInternalbar;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("options {");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@lexer::header {");
    _builder_1.newLine();
    _builder_1.append("package com.foo.parser.antlr.internal;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Hack: Use our own Lexer superclass by means of import. ");
    _builder_1.newLine();
    _builder_1.append("// Currently there is no other way to specify the superclass for the lexer.");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.parser.antlr.Lexer;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@parser::header {");
    _builder_1.newLine();
    _builder_1.append("package com.foo.parser.antlr.internal;");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("@parser::members {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private barGrammarAccess grammarAccess;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void setGrammarAccess(barGrammarAccess grammarAccess) {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.grammarAccess = grammarAccess;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("protected Grammar getGrammar() {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return grammarAccess.getGrammar();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("protected String getValueForTokenName(String tokenName) {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return tokenName;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("// init block");
    _builder_1.newLine();
    _builder_1.append("   \t");
    _builder_1.append("s0");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Entry rule entryRuleS");
    _builder_1.newLine();
    _builder_1.append("entryRuleS");
    _builder_1.newLine();
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("{ before(grammarAccess.getSRule()); }");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("ruleS");
    _builder_1.newLine();
    _builder_1.append("{ after(grammarAccess.getSRule()); } ");
    _builder_1.newLine();
    _builder_1.append("\t ");
    _builder_1.append("EOF ");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("// Rule S");
    _builder_1.newLine();
    _builder_1.append("ruleS ");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("@init {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("int stackSize = keepStackSize();");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append(":");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("(");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("{ before(grammarAccess.getSAccess().getAKeyword()); }");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("\'a\'");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("{ after(grammarAccess.getSAccess().getAKeyword()); }");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append(")");
    _builder_1.newLine();
    _builder_1.append(";");
    _builder_1.newLine();
    _builder_1.append("finally {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("restoreStackSize(stackSize);");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertTranslatesToContentAssistGrammar(_builder, _builder_1.toString());
  }
  
  protected void assertTranslatesToProductionGrammar(final CharSequence xtextGrammar, final String expectedDebugGrammar) {
    try {
      EObject _model = super.getModel(xtextGrammar.toString());
      final Grammar grammar = ((Grammar) _model);
      DefaultGeneratorModule _defaultGeneratorModule = new DefaultGeneratorModule();
      final Injector injector = Guice.createInjector(_defaultGeneratorModule);
      final HoistingGeneratorTest.InMemFSA inMem = new HoistingGeneratorTest.InMemFSA();
      final AntlrOptions options = new AntlrOptions();
      injector.<AntlrDebugProductionGrammarGenerator>getInstance(AntlrDebugProductionGrammarGenerator.class).generate(grammar, options, inMem);
      Assert.assertEquals(expectedDebugGrammar, IterableExtensions.<Object>head(inMem.getAllFiles().values()).toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected void assertTranslatesToContentAssistGrammar(final CharSequence xtextGrammar, final String expectedDebugGrammar) {
    try {
      EObject _model = super.getModel(xtextGrammar.toString());
      final Grammar grammar = ((Grammar) _model);
      DefaultGeneratorModule _defaultGeneratorModule = new DefaultGeneratorModule();
      final Injector injector = Guice.createInjector(_defaultGeneratorModule);
      final HoistingGeneratorTest.InMemFSA inMem = new HoistingGeneratorTest.InMemFSA();
      final AntlrOptions options = new AntlrOptions();
      injector.<AntlrDebugContentAssistGrammarGenerator>getInstance(AntlrDebugContentAssistGrammarGenerator.class).generate(grammar, options, inMem);
      Assert.assertEquals(expectedDebugGrammar, IterableExtensions.<Object>head(inMem.getAllFiles().values()).toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
